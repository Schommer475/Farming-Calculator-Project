* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dropRateCalculator;

import javax.swing.JOptionPane;

/**
 *Class that runs the GUI for the farming calculator.
 *NetBeans was used to build the GUI, auto-generated code is not commented.
 * @author Timothy Schommer
 */
public class FarmingCalculator extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 
	 */
		/**
		 * The number of minutes in a single execution of the farming route, 
		 * without counting respawn or time to restart.
		 */
		private double singleMinutes = 0;
		
		/**
		 * The number of seconds in a single execution of the farming route, 
		 * without counting respawn or time to restart.
		 */
        private double singleSeconds = 0;
        
        /**
		 * The number of days in the time from when the player first begin the route to when they can begin again,
		 * counting respawn and time to return to the start of the route.
		 */
        private double absoluteDays = 0;
        
        /**
		 * The number of hours in the time from when the player first begin the route to when they can begin again,
		 * counting respawn and time to return to the start of the route.
		 */
        private double absoluteHours = 0;
        
        /**
		 * The number of minutes in the time from when the player first begin the route to when they can begin again,
		 * counting respawn and time to return to the start of the route.
		 */
        private double absoluteMinutes = 0;
        
        /**
		 * The number of seconds in the time from when the player first begin the route to when they can begin again,
		 * counting respawn and time to return to the start of the route.
		 */
        private double absoluteSeconds = 0;
        
        /**
         * The farming route.
         */
        private Route route;
        
        /**
         * Label for the time units to output in for all gold per unit time type outputs.
         */
        private String generalOutput;
        
        /**
         * Label for the time units to output in for all number of drops per n units time type outputs.
         */
        private String countOutput;
        
        /**
         * Boolean indicating whether or not to output number of drops per unit time.
         */
        private boolean count = false;
        
        /**
         * Number of time units to output number of drops for.
         */
        private double countAmount;
    /**
     * Creates new form FarmingCalculator
     */
    public FarmingCalculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane12 = new javax.swing.JScrollPane();
        infoPanel = new javax.swing.JPanel();
        infoPane = new javax.swing.JTabbedPane();
        routeInfo = new javax.swing.JPanel();
        singleRepLabel = new javax.swing.JLabel();
        singleMinutesLabel = new javax.swing.JLabel();
        singleMinutesField = new javax.swing.JTextField();
        singleSecondsLabel = new javax.swing.JLabel();
        singleSecondsField = new javax.swing.JTextField();
        absoluteRepLabel = new javax.swing.JLabel();
        infoButton1 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        info1 = new javax.swing.JTextArea();
        absoluteMinutesLabel = new javax.swing.JLabel();
        absoluteSecondsLabel = new javax.swing.JLabel();
        absoluteMinutesField = new javax.swing.JTextField();
        absoluteSecondsField = new javax.swing.JTextField();
        absoluteDaysLabel = new javax.swing.JLabel();
        absoluteHoursLabel = new javax.swing.JLabel();
        absoluteDaysField = new javax.swing.JTextField();
        absoluteHoursField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        info2 = new javax.swing.JTextArea();
        createRouteButton = new javax.swing.JButton();
        changeRtStatsButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        changeRouteInfo = new javax.swing.JTextArea();
        creatureInfoPane = new javax.swing.JTabbedPane();
        addCreaturePanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        creatureNameField = new javax.swing.JTextField();
        numInRouteLabel = new javax.swing.JLabel();
        numInRouteField = new javax.swing.JTextField();
        createCreatureButton = new javax.swing.JButton();
        editCreaturePanel = new javax.swing.JPanel();
        nameLabel1 = new javax.swing.JLabel();
        creatureNameField1 = new javax.swing.JTextField();
        creatureIDNo = new javax.swing.JLabel();
        IDNoField = new javax.swing.JTextField();
        creatureNameField2 = new javax.swing.JTextField();
        numberInRouteLabel2 = new javax.swing.JLabel();
        numberInRouteField2 = new javax.swing.JTextField();
        changeCreatureValuesButton = new javax.swing.JButton();
        infoButton2 = new javax.swing.JToggleButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        info3 = new javax.swing.JTextArea();
        removeCreaturePanel = new javax.swing.JPanel();
        creatureIDNoLabel2 = new javax.swing.JLabel();
        creatureIDNoField2 = new javax.swing.JTextField();
        removeCreatureButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        info4 = new javax.swing.JTextArea();
        infoButton3 = new javax.swing.JToggleButton();
        dropInfoPane = new javax.swing.JTabbedPane();
        addDropPanel = new javax.swing.JPanel();
        creatureIDNoLabel3 = new javax.swing.JLabel();
        creatureIDNoField3 = new javax.swing.JTextField();
        dropNameLabel = new javax.swing.JLabel();
        dropNameField = new javax.swing.JTextField();
        valueLabel = new javax.swing.JLabel();
        addDropButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        info5 = new javax.swing.JTextArea();
        infoButton4 = new javax.swing.JToggleButton();
        valueField = new javax.swing.JTextField();
        dropRateLabel1 = new javax.swing.JLabel();
        dropRateLabel2 = new javax.swing.JLabel();
        dropRateLabel3 = new javax.swing.JLabel();
        dropRateField = new javax.swing.JTextField();
        removeDropPanel = new javax.swing.JPanel();
        creatureIDNoLabel4 = new javax.swing.JLabel();
        creatureIDNoField4 = new javax.swing.JTextField();
        dropIDNoLabel = new javax.swing.JLabel();
        dropIDNoField = new javax.swing.JTextField();
        removeDropButton = new javax.swing.JButton();
        infoButton5 = new javax.swing.JToggleButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        info6 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        info7 = new javax.swing.JTextArea();
        avgDropContainer = new javax.swing.JPanel();
        avgDropCheck = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        timeFrameInput = new javax.swing.JTextPane();
        timeSelector1 = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        timeSelector = new javax.swing.JComboBox<String>();
        calculateButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        inputsLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        inputTree = new javax.swing.JTree();
        resultsLabel = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        outputTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Farming Calculator");

        singleRepLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        singleRepLabel.setText("Single Repetition Time:");

        singleMinutesLabel.setLabelFor(singleMinutesField);
        singleMinutesLabel.setText("Minutes:");

        singleSecondsLabel.setLabelFor(singleSecondsField);
        singleSecondsLabel.setText("Seconds:");

        absoluteRepLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        absoluteRepLabel.setText("Absolute Repetition Time:");

        infoButton1.setText("Info");
        infoButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(null);

        info1.setEditable(false);
        info1.setColumns(20);
        info1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        info1.setRows(5);
        info1.setText("Single repetition time for route:\nThis is the time from the moment \nyou begin the route to the moment\nyou finish a single repetition.\nDo not include the time it takes \nto return to the start of the route\nor the respawn time.");
        info1.setBorder(null);
        jScrollPane2.setViewportView(info1);

        info1.setVisible(false);

        absoluteMinutesLabel.setLabelFor(singleMinutesField);
        absoluteMinutesLabel.setText("Minutes:");

        absoluteSecondsLabel.setLabelFor(singleSecondsField);
        absoluteSecondsLabel.setText("Seconds:");

        absoluteDaysLabel.setText("Days:");

        absoluteHoursLabel.setText("Hours:");

        jScrollPane3.setBorder(null);

        info2.setEditable(false);
        info2.setColumns(20);
        info2.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        info2.setRows(5);
        info2.setText("Absolute repetition time for route:\nThis is the time from the moment \nyou begin the route to the moment\nyou can begin the route again. This \nincludes the amount of time it takes\nto return to the start of the route\nand respawn time. If the respawn time\nis longer than the amount of time it \ntakes to complete the route and \nreturn to the start, then this value\nis the respawn time.");
        info2.setBorder(null);
        jScrollPane3.setViewportView(info2);

        info2.setVisible(false);

        createRouteButton.setText("Create Route");
        createRouteButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRouteButtonActionPerformed(evt);
            }
        });

        changeRtStatsButton.setText("Change Route Stats");
        changeRtStatsButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        changeRtStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRtStatsButtonActionPerformed(evt);
            }
        });

        jScrollPane11.setBorder(null);

        changeRouteInfo.setEditable(false);
        changeRouteInfo.setColumns(20);
        changeRouteInfo.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        changeRouteInfo.setRows(5);
        changeRouteInfo.setText("When changing route values it is\nonly necessary to enter values in\nfields who's values you wish to\nchange. Any fields left blank will\nretain the same value.");
        changeRouteInfo.setBorder(null);
        jScrollPane11.setViewportView(changeRouteInfo);
        changeRouteInfo.setVisible(false);

        javax.swing.GroupLayout routeInfoLayout = new javax.swing.GroupLayout(routeInfo);
        routeInfo.setLayout(routeInfoLayout);
        routeInfoLayout.setHorizontalGroup(
            routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(routeInfoLayout.createSequentialGroup()
                        .addComponent(singleRepLabel)
                        .addGap(91, 91, 91)
                        .addComponent(singleMinutesLabel))
                    .addGroup(routeInfoLayout.createSequentialGroup()
                        .addComponent(absoluteRepLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(absoluteDaysLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(absoluteDaysField, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(singleMinutesField))
                .addGap(34, 34, 34)
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(singleSecondsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(absoluteHoursLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(singleSecondsField, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(absoluteHoursField))
                .addGap(27, 27, 27)
                .addComponent(absoluteMinutesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absoluteMinutesField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(absoluteSecondsLabel)
                .addGap(18, 18, 18)
                .addComponent(absoluteSecondsField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
            .addGroup(routeInfoLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(infoButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routeInfoLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createRouteButton)
                            .addComponent(changeRtStatsButton))
                        .addContainerGap(145, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeInfoLayout.createSequentialGroup()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        routeInfoLayout.setVerticalGroup(
            routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeInfoLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(singleMinutesLabel)
                    .addComponent(singleMinutesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleSecondsLabel)
                    .addComponent(singleSecondsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleRepLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(absoluteSecondsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absoluteSecondsLabel)
                    .addComponent(absoluteMinutesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absoluteMinutesLabel)
                    .addComponent(absoluteRepLabel)
                    .addComponent(absoluteDaysLabel)
                    .addComponent(absoluteHoursLabel)
                    .addComponent(absoluteDaysField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(absoluteHoursField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routeInfoLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(createRouteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeRtStatsButton)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane11)
                        .addGap(51, 51, 51))
                    .addGroup(routeInfoLayout.createSequentialGroup()
                        .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(routeInfoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(routeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(routeInfoLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(infoButton1)))
                        .addContainerGap(23, Short.MAX_VALUE))))
        );

        changeRtStatsButton.setEnabled(false);

        infoPane.addTab("Route Info", routeInfo);

        nameLabel.setText("Name:");

        numInRouteLabel.setText("Number in route:");

        createCreatureButton.setText("Create Creature");
        createCreatureButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createCreatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCreatureButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addCreaturePanelLayout = new javax.swing.GroupLayout(addCreaturePanel);
        addCreaturePanel.setLayout(addCreaturePanelLayout);
        addCreaturePanelLayout.setHorizontalGroup(
            addCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCreaturePanelLayout.createSequentialGroup()
                .addGroup(addCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCreaturePanelLayout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creatureNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(numInRouteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numInRouteField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addCreaturePanelLayout.createSequentialGroup()
                        .addGap(507, 507, 507)
                        .addComponent(createCreatureButton)))
                .addContainerGap(360, Short.MAX_VALUE))
        );
        addCreaturePanelLayout.setVerticalGroup(
            addCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCreaturePanelLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(addCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(creatureNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numInRouteLabel)
                    .addComponent(numInRouteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addComponent(createCreatureButton)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        creatureInfoPane.addTab("Add Creature", addCreaturePanel);

        nameLabel1.setText("Name:");

        creatureIDNo.setText("Creature ID Number:");

        numberInRouteLabel2.setText("Number in route:");

        changeCreatureValuesButton.setText("Change Creature Values");
        changeCreatureValuesButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        changeCreatureValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeCreatureValuesButtonActionPerformed(evt);
            }
        });

        infoButton2.setText("Info");
        infoButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButton2ActionPerformed(evt);
            }
        });

        jScrollPane4.setBorder(null);

        info3.setEditable(false);
        info3.setColumns(20);
        info3.setRows(5);
        info3.setText("Creature ID Number:\nEnter the ID Number\nof the creature whose\nvalues you wish to\nchange.\nThis ID Number can\nbe found under \n\"Creature Values\".\n");
        jScrollPane4.setViewportView(info3);
        info3.setVisible(false);

        javax.swing.GroupLayout editCreaturePanelLayout = new javax.swing.GroupLayout(editCreaturePanel);
        editCreaturePanel.setLayout(editCreaturePanelLayout);
        editCreaturePanelLayout.setHorizontalGroup(
            editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editCreaturePanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editCreaturePanelLayout.createSequentialGroup()
                        .addComponent(creatureIDNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(nameLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creatureNameField2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(numberInRouteLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberInRouteField2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(changeCreatureValuesButton)
                        .addContainerGap(198, Short.MAX_VALUE))
                    .addGroup(editCreaturePanelLayout.createSequentialGroup()
                        .addComponent(infoButton2)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(513, 513, 513))))
            .addGroup(editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(editCreaturePanelLayout.createSequentialGroup()
                    .addGap(521, 521, 521)
                    .addComponent(creatureNameField1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(533, Short.MAX_VALUE)))
        );
        editCreaturePanelLayout.setVerticalGroup(
            editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editCreaturePanelLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creatureIDNo)
                    .addComponent(IDNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel1)
                    .addComponent(creatureNameField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberInRouteLabel2)
                    .addComponent(numberInRouteField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeCreatureValuesButton))
                .addGroup(editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editCreaturePanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(infoButton2))
                    .addGroup(editCreaturePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(132, Short.MAX_VALUE))
            .addGroup(editCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(editCreaturePanelLayout.createSequentialGroup()
                    .addGap(428, 428, 428)
                    .addComponent(creatureNameField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        creatureInfoPane.addTab("Change Creature Values", editCreaturePanel);

        creatureIDNoLabel2.setText("Creature ID Number: ");

        removeCreatureButton.setText("Remove Creature");
        removeCreatureButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeCreatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCreatureButtonActionPerformed(evt);
            }
        });

        jScrollPane5.setBorder(null);

        info4.setEditable(false);
        info4.setColumns(20);
        info4.setRows(5);
        info4.setText("Creature ID Number:\nEnter the ID Number\nof the creature you\nwish to remove.\nThis ID Number can\nbe found under \n\"Creature Values\".\n\nRemoving a creature\nwill also remove any\ndrops listed under it.");
        jScrollPane5.setViewportView(info4);
        info4.setVisible(false);

        infoButton3.setText("Info");
        infoButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removeCreaturePanelLayout = new javax.swing.GroupLayout(removeCreaturePanel);
        removeCreaturePanel.setLayout(removeCreaturePanelLayout);
        removeCreaturePanelLayout.setHorizontalGroup(
            removeCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeCreaturePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(creatureIDNoLabel2)
                .addGap(18, 18, 18)
                .addComponent(creatureIDNoField2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(removeCreatureButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeCreaturePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(infoButton3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(527, 527, 527))
        );
        removeCreaturePanelLayout.setVerticalGroup(
            removeCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeCreaturePanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(removeCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creatureIDNoLabel2)
                    .addComponent(creatureIDNoField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeCreatureButton))
                .addGap(28, 28, 28)
                .addGroup(removeCreaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infoButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        creatureInfoPane.addTab("Remove Creature", removeCreaturePanel);

        infoPane.addTab("Creature Info", creatureInfoPane);
        creatureInfoPane.setEnabledAt(1, false);
        creatureInfoPane.setEnabledAt(2, false);

        creatureIDNoLabel3.setText("Creature ID Number:");

        dropNameLabel.setText("Name:");

        valueLabel.setText("Gold Value:");

        addDropButton.setText("Add Drop");
        addDropButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addDropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDropButtonActionPerformed(evt);
            }
        });

        jScrollPane6.setBorder(null);

        info5.setEditable(false);
        info5.setColumns(20);
        info5.setRows(5);
        info5.setText("Creature ID Number:\nEnter the ID Number\nof the creature you\nwish to add a drop\nto.\nThis ID Number can\nbe found under \n\"Creature Values\".");
        info5.setBorder(null);
        jScrollPane6.setViewportView(info5);
        info5.setVisible(false);

        infoButton4.setText("Info");
        infoButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButton4ActionPerformed(evt);
            }
        });

        dropRateLabel1.setText("Drop Rate:");

        dropRateLabel2.setText("(enter as a");

        dropRateLabel3.setText("decimal)");

        javax.swing.GroupLayout addDropPanelLayout = new javax.swing.GroupLayout(addDropPanel);
        addDropPanel.setLayout(addDropPanelLayout);
        addDropPanelLayout.setHorizontalGroup(
            addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDropPanelLayout.createSequentialGroup()
                .addGroup(addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addDropPanelLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(creatureIDNoLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creatureIDNoField3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(dropNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(valueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addDropPanelLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(infoButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addGroup(addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addDropPanelLayout.createSequentialGroup()
                        .addGroup(addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dropRateLabel2)
                            .addGroup(addDropPanelLayout.createSequentialGroup()
                                .addComponent(dropRateLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dropRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addComponent(addDropButton)
                        .addGap(95, 95, 95))
                    .addGroup(addDropPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(dropRateLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        addDropPanelLayout.setVerticalGroup(
            addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDropPanelLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addGroup(addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creatureIDNoLabel3)
                    .addComponent(creatureIDNoField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropNameLabel)
                    .addComponent(dropNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel)
                    .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDropButton)
                    .addComponent(dropRateLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addDropPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addDropPanelLayout.createSequentialGroup()
                        .addGroup(addDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addDropPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(infoButton4))
                            .addGroup(addDropPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(dropRateLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dropRateLabel3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        dropInfoPane.addTab("Add Drop", addDropPanel);

        creatureIDNoLabel4.setText("Creature ID Number:");

        dropIDNoLabel.setText("Drop ID Number:");

        removeDropButton.setText("Remove Drop");
        removeDropButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        removeDropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDropButtonActionPerformed(evt);
            }
        });

        infoButton5.setText("Info");
        infoButton5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButton5ActionPerformed(evt);
            }
        });

        jScrollPane7.setBorder(null);

        info6.setEditable(false);
        info6.setColumns(20);
        info6.setRows(5);
        info6.setText("Creature ID Number:\nEnter the ID Number\nof the creature you\nwish to add a drop\nto.\nThis ID Number can\nbe found under \n\"Creature Values\".");
        info6.setBorder(null);
        jScrollPane7.setViewportView(info6);
        info6.setVisible(false);

        jScrollPane8.setBorder(null);

        info7.setEditable(false);
        info7.setColumns(20);
        info7.setRows(5);
        info7.setText("Drop ID Number:\nEnter the ID Number\nof the drop you\nwish to remove.\nThis ID Number can\nbe found under \n\"Drop Values\".");
        info7.setBorder(null);
        jScrollPane8.setViewportView(info7);
        info7.setVisible(false);

        javax.swing.GroupLayout removeDropPanelLayout = new javax.swing.GroupLayout(removeDropPanel);
        removeDropPanel.setLayout(removeDropPanelLayout);
        removeDropPanelLayout.setHorizontalGroup(
            removeDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeDropPanelLayout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addComponent(infoButton5)
                .addGap(47, 47, 47)
                .addGroup(removeDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeDropPanelLayout.createSequentialGroup()
                        .addComponent(creatureIDNoLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creatureIDNoField4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(removeDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeDropPanelLayout.createSequentialGroup()
                        .addComponent(dropIDNoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropIDNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(removeDropButton))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(214, Short.MAX_VALUE))
        );
        removeDropPanelLayout.setVerticalGroup(
            removeDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeDropPanelLayout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addGroup(removeDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creatureIDNoLabel4)
                    .addComponent(creatureIDNoField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropIDNoLabel)
                    .addComponent(dropIDNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeDropButton))
                .addGap(18, 18, 18)
                .addGroup(removeDropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeDropPanelLayout.createSequentialGroup()
                        .addComponent(infoButton5)
                        .addContainerGap(122, Short.MAX_VALUE))
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane8)))
        );

        dropInfoPane.addTab("Remove Drop", removeDropPanel);

        infoPane.addTab("Drop Info", dropInfoPane);
        dropInfoPane.setEnabledAt(1, false);

        avgDropCheck.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        avgDropCheck.setText("Calculate Average number of a given drop obtained in:");
        avgDropCheck.setBorder(null);
        avgDropCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgDropCheckActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(timeFrameInput);
        timeFrameInput.setEnabled(false);

        timeSelector1.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Seconds", "Minutes", "Hours", "Days" }));
        timeSelector1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout avgDropContainerLayout = new javax.swing.GroupLayout(avgDropContainer);
        avgDropContainer.setLayout(avgDropContainerLayout);
        avgDropContainerLayout.setHorizontalGroup(
            avgDropContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avgDropContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(avgDropCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeSelector1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        avgDropContainerLayout.setVerticalGroup(
            avgDropContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avgDropContainerLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(avgDropContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(timeSelector1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(avgDropContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(avgDropCheck)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        timeSelector1.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Output averages as averge amount obtained per:");

        timeSelector.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Second", "Minute", "Hour", "Day" }));
        timeSelector.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        calculateButton.setText("Calculate");
        calculateButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        inputsLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        inputsLabel.setText("Inputs");

        inputTree.setModel(buildInputTree());
        inputTree.setRootVisible(false);
        jScrollPane9.setViewportView(inputTree);

        resultsLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resultsLabel.setText("Results");

        outputTree.setModel(buildOutputTree());
        outputTree.setRootVisible(false);
        jScrollPane10.setViewportView(outputTree);

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(infoPane)
            .addComponent(avgDropContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(calculateButton)
                        .addGap(30, 30, 30)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputsLabel)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultsLabel)
                            .addComponent(jScrollPane10))))
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(infoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(avgDropContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(timeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calculateButton)
                    .addComponent(resetButton))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputsLabel)
                    .addComponent(resultsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                    .addComponent(jScrollPane10))
                .addGap(0, 89, Short.MAX_VALUE))
        );

        infoPane.setEnabledAt(1, false);
        infoPane.setEnabledAt(2, false);
        calculateButton.setEnabled(false);
        resetButton.setEnabled(false);

        jScrollPane12.setViewportView(infoPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 1149, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane12)
        );

        jScrollPane12.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPane12.getHorizontalScrollBar().setUnitIncrement(16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Toggles the visibility of the first two info text boxes when infoButton1 is pressed.
     * @param evt
     */
    private void infoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButton1ActionPerformed
        info1.setVisible(!info1.isVisible());
        info2.setVisible(!info2.isVisible());
    }//GEN-LAST:event_infoButton1ActionPerformed

    /**
     * Toggles the visibility of the third info text box when infoButton2 is pressed.
     * @param evt
     */
    private void infoButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButton2ActionPerformed
        info3.setVisible(!info3.isVisible());
    }//GEN-LAST:event_infoButton2ActionPerformed

    /**
     * Toggles the visibility of the fourth info text box when infoButton3 is pressed.
     * @param evt
     */
    private void infoButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButton3ActionPerformed
        info4.setVisible(!info4.isVisible());
    }//GEN-LAST:event_infoButton3ActionPerformed

    /**
     * Toggles the visibility of the fifth info text box when infoButton4 is pressed.
     * @param evt
     */
    private void infoButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButton4ActionPerformed
        info5.setVisible(!info5.isVisible());
    }//GEN-LAST:event_infoButton4ActionPerformed

    /**
     * Toggles the visibility of the sixth and seventh info text boxes when infoButton5 is pressed.
     * @param evt
     */
    private void infoButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButton5ActionPerformed
        info6.setVisible(!info6.isVisible());
        info7.setVisible(!info7.isVisible());
    }//GEN-LAST:event_infoButton5ActionPerformed

    /**
     * Handles the execution of the button to create the route being pressed.
     * @param evt
     */
    private void createRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRouteButtonActionPerformed
        try
        {
        	//Bounds checking the input fields and requesting valid values if out of bounds.
        	if((Double.parseDouble(singleMinutesField.getText()) < 0) || (Double.parseDouble(singleSecondsField.getText()) < 0) || (Double.parseDouble(absoluteMinutesField.getText()) < 0)
        			|| (Double.parseDouble(absoluteSecondsField.getText()) < 0) || (Double.parseDouble(absoluteDaysField.getText()) < 0) || (Double.parseDouble(absoluteHoursField.getText()) < 0))
        	{
        		JOptionPane.showMessageDialog(this, "Any time values entered must be positive or 0. \nAdditionally, both single and absolute times must have at least one positive, non-zero entry.");
        	}
        	//Making sure that both single and absolute time are non-zero, and requesting valid values if not.
        	else if(((Double.parseDouble(singleMinutesField.getText()) == 0) && (Double.parseDouble(singleSecondsField.getText()) == 0)) || ((Double.parseDouble(absoluteMinutesField.getText()) == 0)
        			&& (Double.parseDouble(absoluteSecondsField.getText()) == 0) && (Double.parseDouble(absoluteDaysField.getText()) == 0) && (Double.parseDouble(absoluteHoursField.getText()) == 0)))
        	{
        		JOptionPane.showMessageDialog(this, "Both single and absolute times must have at least one positive, non-zero entry.");
        	}
        	else
        	{
        		//Set the time values and clear the fields on the route info panel
        		singleMinutes = Double.parseDouble(singleMinutesField.getText());
        		singleSeconds = Double.parseDouble(singleSecondsField.getText());
        		absoluteDays = Double.parseDouble(absoluteDaysField.getText());
        		absoluteHours = Double.parseDouble(absoluteHoursField.getText());
        		absoluteMinutes = Double.parseDouble(absoluteMinutesField.getText());
        		absoluteSeconds = Double.parseDouble(absoluteSecondsField.getText());
        		clearRouteInfoPanel();
        		
        		//Create a new route and build and set the model for the input display tree
        		route = new Route();
        		inputTree.setModel(buildInputTree());
        		
        		//Disable the Create Route button and enable the Change Route Stats and Reset buttons
        		createRouteButton.setEnabled(false);
        		changeRtStatsButton.setEnabled(true);
        		resetButton.setEnabled(true);
        		
        		//Enable the creature tab and switch to it.
        		infoPane.setEnabledAt(1, true);
        		infoPane.setSelectedIndex(1);
        	}
        }
        catch(NumberFormatException e)
        {
        	//changes any blank fields to 0 and tries again
        	if((singleMinutesField.getText().equals("")) || (singleSecondsField.getText().equals("")) || (absoluteDaysField.getText().equals("")) 
        			|| (absoluteHoursField.getText().equals("")) || (absoluteMinutesField.getText().equals("")) || (absoluteSecondsField.getText().equals("")))
        	{
        		if((singleMinutesField.getText().equals("")))
        		{
        			singleMinutesField.setText("0");
        		}
        		if((singleSecondsField.getText().equals("")))
        		{
        			singleSecondsField.setText("0");
        		}
        		if((absoluteDaysField.getText().equals("")))
        		{
        			absoluteDaysField.setText("0");
        		}
        		if((absoluteHoursField.getText().equals("")))
        		{
        			absoluteHoursField.setText("0");
        		}
        		if((absoluteMinutesField.getText().equals("")))
        		{
        			absoluteMinutesField.setText("0");
        		}
        		if((absoluteSecondsField.getText().equals("")))
        		{
        			absoluteSecondsField.setText("0");
        		}
        		createRouteButtonActionPerformed(evt);
        	}
        	//Handling non-number values being entered into the time value fields.
        	else
        	{
        		JOptionPane.showMessageDialog(this, "Any time values entered must be integer or decimal values.");
        	}
        }
    }//GEN-LAST:event_createRouteButtonActionPerformed

    /**
     * Handles the execution of the button to change the route stats (times) being pressed.
     * @param evt
     */
    private void changeRtStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRtStatsButtonActionPerformed
    	try
        {
    		//Bounds checking the input fields and requesting valid values if out of bounds.
        	if((Double.parseDouble(singleMinutesField.getText()) < 0) || (Double.parseDouble(singleSecondsField.getText()) < 0) || (Double.parseDouble(absoluteMinutesField.getText()) < 0)
        			|| (Double.parseDouble(absoluteSecondsField.getText()) < 0) || (Double.parseDouble(absoluteDaysField.getText()) < 0) || (Double.parseDouble(absoluteHoursField.getText()) < 0))
        	{
        		JOptionPane.showMessageDialog(this, "Any time values entered must be positive or 0. \nAdditionally, both single and absolute times must have at least one positive, non-zero entry.");
        	}
        	//Making sure that both single and absolute time are non-zero, and requesting valid values if not.
        	else if(((Double.parseDouble(singleMinutesField.getText()) == 0) && (Double.parseDouble(singleSecondsField.getText()) == 0)) || ((Double.parseDouble(absoluteMinutesField.getText()) == 0)
        			&& (Double.parseDouble(absoluteSecondsField.getText()) == 0) && (Double.parseDouble(absoluteDaysField.getText()) == 0) && (Double.parseDouble(absoluteHoursField.getText()) == 0)))
        	{
        		JOptionPane.showMessageDialog(this, "Both single and absolute times must have at least one positive, non-zero entry.");
        	}
        	else
        	{
        		//Set the time values and clear the fields on the route info panel
        		singleMinutes = Double.parseDouble(singleMinutesField.getText());
        		singleSeconds = Double.parseDouble(singleSecondsField.getText());
        		absoluteDays = Double.parseDouble(absoluteDaysField.getText());
        		absoluteHours = Double.parseDouble(absoluteHoursField.getText());
        		absoluteMinutes = Double.parseDouble(absoluteMinutesField.getText());
        		absoluteSeconds = Double.parseDouble(absoluteSecondsField.getText());
        		clearRouteInfoPanel();
        		
        		//Rebuild and set the model for the input display tree
        		inputTree.setModel(buildInputTree());
        		
        	}
        }
        catch(NumberFormatException e)
        {
        	//changes any blank fields to 0 and tries again
        	if((singleMinutesField.getText().equals("")) || (singleSecondsField.getText().equals("")) || (absoluteDaysField.getText().equals("")) 
        			|| (absoluteHoursField.getText().equals("")) || (absoluteMinutesField.getText().equals("")) || (absoluteSecondsField.getText().equals("")))
        	{
        		if((singleMinutesField.getText().equals("")))
        		{
        			singleMinutesField.setText("0");
        		}
        		if((singleSecondsField.getText().equals("")))
        		{
        			singleSecondsField.setText("0");
        		}
        		if((absoluteDaysField.getText().equals("")))
        		{
        			absoluteDaysField.setText("0");
        		}
        		if((absoluteHoursField.getText().equals("")))
        		{
        			absoluteHoursField.setText("0");
        		}
        		if((absoluteMinutesField.getText().equals("")))
        		{
        			absoluteMinutesField.setText("0");
        		}
        		if((absoluteSecondsField.getText().equals("")))
        		{
        			absoluteSecondsField.setText("0");
        		}
        		changeRtStatsButtonActionPerformed(evt);
        	}
        	//Handling non-number values being entered into the time value fields.
        	else
        	{
        		JOptionPane.showMessageDialog(this, "Any time values entered must be integer or decimal values.");
        	}
        }
    }//GEN-LAST:event_changeRtStatsButtonActionPerformed

    /**
     * Toggles the fields related to drop count on and off bases on the check box 
     * @param evt
     */
    private void avgDropCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgDropCheckActionPerformed
        count = !count;
        timeFrameInput.setEnabled(!timeFrameInput.isEnabled());
        timeSelector1.setEnabled(!timeSelector1.isEnabled());
    }//GEN-LAST:event_avgDropCheckActionPerformed

    /**
     * Handles the execution of the button to calculate values being pressed.
     * @param evt
     */
    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        //Set the output string types.
    	countOutput = timeSelector1.getSelectedItem().toString();
        generalOutput = timeSelector.getSelectedItem().toString();
        
        //If not displaying drop count information, build and set the output tree model
        if(!count)
        {
        	outputTree.setModel(buildOutputTree());
        }
        else
        {
        	try
        	{
        		//Obtain and validate the given time frame
        		if(Double.parseDouble(timeFrameInput.getText()) <= 0)
        		{
        			JOptionPane.showMessageDialog(this, "Enter a positive, non-zero time frame.");
        		}
        		else
        		{
        			countAmount = Double.parseDouble(timeFrameInput.getText());
        			outputTree.setModel(buildOutputTree());
        		}
        	}
        	//Ask for a valid time frame if the format is invalid.
        	catch(NumberFormatException e)
        	{
        		JOptionPane.showMessageDialog(this, "Enter a positive, non-zero time frame.");
        	}
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    /**
     * Handles the execution of the reset button being pressed.
     * @param evt
     */
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        //clear the contents of all the fields in every panel.
    	clearRouteInfoPanel();
        clearAddCreaturePanel();
        clearEditCreaturePanel();
        clearRemoveCreaturePanel();
        clearAddDropPanel();
        clearRemoveDropPanel();
        
        //Move each tab back to their starting sub-tab and disable their other sub-tabs
        dropInfoPane.setSelectedIndex(0);
        dropInfoPane.setEnabledAt(1, false);
        creatureInfoPane.setSelectedIndex(0);
        creatureInfoPane.setEnabledAt(1, false);
        creatureInfoPane.setEnabledAt(2, false);
        
        //Move the main panel back to its starting tab and disable its other tabs.
        infoPane.setSelectedIndex(0);
        infoPane.setEnabledAt(1, false);
        infoPane.setEnabledAt(2, false);
        
        //set the selected/enabled/visibility states of all buttons, selectors, check boxes, 
        //and text boxes back to their starting values.
        createRouteButton.setEnabled(true);
        changeRtStatsButton.setEnabled(false);
        resetButton.setEnabled(false);
        avgDropCheck.setSelected(false);
        timeFrameInput.setText("");
        timeFrameInput.setEnabled(false);
        timeSelector1.setSelectedIndex(0);
        timeSelector1.setEnabled(false);
        timeSelector.setSelectedIndex(0);
        infoButton1.setSelected(false);
        infoButton2.setSelected(false);
        infoButton3.setSelected(false);
        infoButton4.setSelected(false);
        infoButton5.setSelected(false);
        info1.setVisible(false);
        info2.setVisible(false);
        info3.setVisible(false);
        info4.setVisible(false);
        info5.setVisible(false);
        info6.setVisible(false);
        info7.setVisible(false);
        
        //Reset the field values back to the starting values
        singleMinutes = 0;
        singleSeconds = 0;
        absoluteDays = 0;
        absoluteHours = 0;
        absoluteMinutes = 0;
        absoluteSeconds = 0;
        route = null;
        generalOutput = timeSelector.getSelectedItem().toString();
        countOutput = timeSelector1.getSelectedItem().toString();;
        count = false;
        countAmount = 0;
        
        //Rebuild and set the input and output tree models (empty)
        outputTree.setModel(buildOutputTree());
        inputTree.setModel(buildOutputTree());
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * Handles the execution of the button to create a creature being pressed.
     * @param evt
     */
    private void createCreatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCreatureButtonActionPerformed
        try
        {
        	//Validates the number of creatures in the route and asks for valid information if needed.
        	if(Integer.parseInt(numInRouteField.getText()) < 1)
        	{
        		JOptionPane.showMessageDialog(this, "Enter a positive, non-zero, integer number of creatures.");
        	}
        	else
        	{
        		//Add a creature to the route with either the specified name or a default name.
        		if(creatureNameField.getText().equals(""))
        		{
        			route.addCreature(Integer.parseInt(numInRouteField.getText()));
        		}
        		else
        		{
        			route.addCreature(Integer.parseInt(numInRouteField.getText()), creatureNameField.getText());
        		}
        		
        		//Update the input tree and clear the fields in the add creature panel
        		inputTree.setModel(buildInputTree());
        		clearAddCreaturePanel();
        		
        		//Make sure the panels for editing and removing creatures are enabled.
        		creatureInfoPane.setEnabledAt(1, true);
        		creatureInfoPane.setEnabledAt(2, true);
        		
        		//Make sure the panel for working with drops is available and switch to it.
        		infoPane.setEnabledAt(2, true);
        		infoPane.setSelectedIndex(2);
        	}
        }
        catch(NumberFormatException e)
        {
        	//Handles an invalid or non-existent input in the number of creatures box
        	JOptionPane.showMessageDialog(this, "Enter a positive, non-zero, integer number of creatures.");
        }
    }//GEN-LAST:event_createCreatureButtonActionPerformed

    /**
     * Handles the execution of the button to edit a creatures values being pressed.
     * @param evt
     */
    private void changeCreatureValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeCreatureValuesButtonActionPerformed
    	
    	try
        {
        	//Get and validate the creature ID number, displaying an appropriate error message if invalid
        	int id = Integer.parseInt(IDNoField.getText());
        	if(!((0 < id) && (id <= route.getCreatures().size())))
			{
				JOptionPane.showMessageDialog(this, "Enter a valid creature ID number.");
			}
        	else 
        	{
        		//Validate the given number of creatures in the route and display an appropriate error message if invalid
        		if(Integer.parseInt(numberInRouteField2.getText()) < 1)
            	{
            		JOptionPane.showMessageDialog(this, "Enter a positive, non-zero, integer number of creatures.");
            	}
            	else
            	{
            		//change the creature's values
            		if(creatureNameField2.getText().equals(""))
            		{
            			route.getCreatures().get(id - 1).setName("Creature_" + id);
            			route.getCreatures().get(id - 1).setNumInRoute(Integer.parseInt(numberInRouteField2.getText()));
            		}
            		else
            		{
            			route.getCreatures().get(id - 1).setName(creatureNameField2.getText());
            			route.getCreatures().get(id - 1).setNumInRoute(Integer.parseInt(numberInRouteField2.getText()));
            		}
            		
            		//Rebuild and set the input tree model
            		inputTree.setModel(buildInputTree());
            		
            		//Clear the edit creature panel
            		clearEditCreaturePanel();
            		
            	}
        		
        	}
        	
        }
        catch(NumberFormatException e)
        {
        	//Handles invalid or non-existent creature ID numbers
        	JOptionPane.showMessageDialog(this, "Make sure you have entered a valid creature ID number and a valid number of creatures in the route.");
        }
    }//GEN-LAST:event_changeCreatureValuesButtonActionPerformed

    /**
     * Handles the execution of the button to remove a creature being pressed.
     * @param evt
     */
    private void removeCreatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCreatureButtonActionPerformed
        try
        {
        	//Bound check the creature ID field
        	if(Integer.parseInt(creatureIDNoField2.getText()) > 0 && Integer.parseInt(creatureIDNoField2.getText()) <= route.getCreatures().size())
        	{
        		//remove the creature from the route and update the input display tree
        		route.removeCreature(Integer.parseInt(creatureIDNoField2.getText()));
        		inputTree.setModel(buildInputTree());
        		
        		//Clear the fields in the remove creature panel
        		clearRemoveCreaturePanel();
        		
        		//If removing the creature removed the last drop: 
        		//the sub-tab of the drops tab gets switched to the add drop tab, 
        		//the remove drops sub-tab is disabled, and the calculate button is disabled
        		if(!dropsExist())
        		{
        			dropInfoPane.setSelectedIndex(0);
        			dropInfoPane.setEnabledAt(1, false);
        			calculateButton.setEnabled(false);
        		}
        		//If removing the creature removes the last creature from the route:
        		//the drops tab is disabled, 
        		//the creature tab's edit creature and remove creature sub-tabs are disabled,
        		//and the creature tab is moved to its add creature sub-tab
        		if(route.getCreatures().size() == 0)
        		{
        			infoPane.setEnabledAt(2, false);
        			creatureInfoPane.setSelectedIndex(0);
        			creatureInfoPane.setEnabledAt(1, false);
        			creatureInfoPane.setEnabledAt(2, false);
        		}
        	}
        	//Request a valid ID number if given number is out-of-bounds.
        	else
        	{
        		JOptionPane.showMessageDialog(this, "Enter a valid creature ID number.");
        	}
        }
      //Request a valid ID number if no value was given or given value is in the wrong format.
        catch(NumberFormatException e)
        {
        	JOptionPane.showMessageDialog(this, "Enter a valid creature ID number.");
        }
    }//GEN-LAST:event_removeCreatureButtonActionPerformed

    /**
     * Handles the execution of the button to add a drop being pressed.
     * @param evt
     */
    private void addDropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDropButtonActionPerformed
        try
        {
        	//Bounds check the creature ID number and the value and drop rate fields.
        	if(0 < Integer.parseInt(creatureIDNoField3.getText()) && Integer.parseInt(creatureIDNoField3.getText()) <= route.getCreatures().size()
        			&& 0 <= Double.parseDouble(valueField.getText()) 
        			&& 0 < Double.parseDouble(dropRateField.getText()) && Double.parseDouble(dropRateField.getText()) <= 1)
        	{
        		//Add the drop to the route, either with a given or default name.
        		if(dropNameField.getText().equals(""))
        		{
        			route.addDrop(Integer.parseInt(creatureIDNoField3.getText()), Double.parseDouble(valueField.getText()), Double.parseDouble(dropRateField.getText()));
        		}
        		else
        		{
        			route.addDrop(Integer.parseInt(creatureIDNoField3.getText()), dropNameField.getText() ,Double.parseDouble(valueField.getText()), Double.parseDouble(dropRateField.getText()));
        		}
        		
        		//Update the input tree model, clear the add drop tab fields, 
        		//and make sure the remove drop tab and the calculate button are both enabled.
        		inputTree.setModel(buildInputTree());
        		clearAddDropPanel();
        		dropInfoPane.setEnabledAt(1, true);
        		calculateButton.setEnabled(true);
        	}
        	//Handle invalid values in the creature ID number, value, and drop rate fields.
        	else
        	{
        		JOptionPane.showMessageDialog(this, "Please make sure you have valid values entered in all fields. "
        				+ "\nCreature ID Numbers must be valid, gold values must be positive or zero, "
        				+ "\nand drop rates cannot be zero and must be less than or equal to one.");
        	}
        }
        //handle invalid formats in the numbers for the add drop panel
        catch(NumberFormatException e)
        {
        	//if the field is empty and thus can't be parsed, set it to 0 and try again
        	if(valueField.getText().equals(""))
    		{
    			valueField.setText("0");
    			addDropButtonActionPerformed(evt);
    		}
        	//Handle invalid, non-blank, values in the numbers for the add drop panel
    		else
    		{
    			JOptionPane.showMessageDialog(this, "Please make sure you have valid values entered in all fields.");
    		}
        }
    }//GEN-LAST:event_addDropButtonActionPerformed

    /**
     * Handles the execution of the button to remove a drop being pressed.
     * @param evt
     */
    private void removeDropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDropButtonActionPerformed
        try
        {
        	//Bound check the creature ID number
        	if(0 < Integer.parseInt(creatureIDNoField4.getText()) && Integer.parseInt(creatureIDNoField4.getText()) <= route.getCreatures().size())
        	{
        		//Bound check the drop ID number
        		if(0 < Integer.parseInt(dropIDNoField.getText()) 
        				&& Integer.parseInt(dropIDNoField.getText()) <= route.getCreatures().get(Integer.parseInt(creatureIDNoField4.getText()) - 1).getDrops().size())
        		{
        			//Remove the drop, rebuild the input tree, and clear the text from the remove drop panel.
        			route.removeDrop(Integer.parseInt(creatureIDNoField4.getText()), Integer.parseInt(dropIDNoField.getText()));
        			inputTree.setModel(buildInputTree());
        			clearRemoveDropPanel();
        			
        			//If there are no longer any creatures with drops, 
        			//move to the add drop tab, disable the remove drop tab, and disable the calculate button.
        			if(!dropsExist())
        			{
        				dropInfoPane.setSelectedIndex(0);
        				dropInfoPane.setEnabledAt(1, false);
        				calculateButton.setEnabled(false);
        			}
        		}
        		else
        		{
        			//Respond to an invalid drop ID number
        			JOptionPane.showMessageDialog(this, "Please enter a drop ID number that is valid for the creature you wish to remove the drop from.");
        		}
        	}
        	else
        	{
        		//Respond to an invalid Creature ID number
        		JOptionPane.showMessageDialog(this, "Please enter valid values for both ID numbers.");
        	}
        }
        catch(NumberFormatException e)
        {
        	//Handle invalidly formatted ID number text.
        	JOptionPane.showMessageDialog(this, "Please enter valid values for both ID numbers.");
        }
    }//GEN-LAST:event_removeDropButtonActionPerformed

    /**
     * Converts from minutes to seconds.
     * @param minutes
     * 		The number of minutes to convert into seconds.
     * @return
     * 		The number of seconds held in the given number of minutes.
     */
    private double minutesToSeconds(double minutes)
    {
        return minutes * 60;
    }
    
    /**
     * Converts from seconds to minutes.
     * @param seconds
     * 		The number of seconds to convert into minutes.
     * @return
     * 		The number of minutes held in the given number of seconds.
     */
    private double secondsToMinutes(double seconds)
    {
        return seconds / 60;
    }
    
    /**
     * Converts from hours to minutes.
     * @param hours
     * 		The number of hours to convert into minutes.
     * @return
     * 		The number of minutes held in the given number of hours.
     */
    private double hoursToMinutes(double hours)
    {
        return hours * 60;
    }
    
    /**
     * Converts from minutes to hours.
     * @param minutes
     * 		The number of minutes to convert into hours.
     * @return
     * 		The number of hours held in the given number of minutes.
     */
    private double minutesToHours(double minutes)
    {
        return minutes / 60;
    }
    
    /**
     * Converts from hours to seconds.
     * @param hours
     * 		The number of hours to convert into seconds.
     * @return
     * 		The number of seconds held in the given number of hours.
     */
    private double hoursToSeconds(double hours)
    {
        return minutesToSeconds(hoursToMinutes(hours));
    }
    
    /**
     * Converts from seconds to hours.
     * @param seconds
     * 		The number of seconds to convert into hours.
     * @return
     * 		The number of hours held in the given number of seconds.
     */
    private double secondsToHours(double seconds)
    {
        return minutesToHours(secondsToMinutes(seconds));
    }
    
    /**
     * Converts from days to hours.
     * @param days
     * 		The number of days to convert into hours.
     * @return
     * 		The number of hours held in the given number of days.
     */
    private double daysToHours(double days)
    {
        return days * 24;
    }
    
    /**
     * Converts from hours to days.
     * @param hours
     * 		The number of hours to convert into days.
     * @return
     * 		The number of days held in the given number of hours.
     */
    private double hoursToDays(double hours)
    {
        return hours / 24;
    }
    
    /**
     * Converts from days to minutes.
     * @param days
     * 		The number of days to convert into minutes.
     * @return
     * 		The number of minutes held in the given number of days.
     */
    private double daysToMinutes(double days)
    {
        return hoursToMinutes(daysToHours(days));
    }
    
    /**
     * Converts from days to seconds.
     * @param days
     * 		The number of days to convert into seconds.
     * @return
     * 		The number of seconds held in the given number of days.
     */
    private double daysToSeconds(double days)
    {
        return hoursToSeconds(daysToHours(days));
    }
    
    /**
     * Converts from minutes to days.
     * @param minutes
     * 		The number of minutes to convert into days.
     * @return
     * 		The number of days held in the given number of minutes.
     */
    private double minutesToDays(double minutes)
    {
        return hoursToDays(minutesToHours(minutes));
    }
    
    /**
     * Converts from seconds to days.
     * @param seconds
     * 		The number of seconds to convert into days.
     * @return
     * 		The number of days held in the given number of seconds.
     */
    private double secondsToDays(double seconds)
    {
        return minutesToDays(secondsToMinutes(seconds));
    }
    
    /**
     * Converts the given total time into the given units.
     * @param days
     * 		The number of full days in the time frame to be converted.
     * @param hours
     * 		The number of full hours (after taking off the number of days) in the time frame to be converted.
     * @param minutes
     * 		The number of full minutes (after taking off the number of days and hours) 
     * 		in the time frame to be converted.
     * @param seconds
     * 		The number of seconds (after taking off the number of days, hours, and minutes) 
     * 		in the time frame to be converted.
     * @param units
     * 		String representation of the units to convert the total time into.
     * @return
     * 		The total amount of time in the given units.
     */
    private double unitConversion(double days, double hours, double minutes, double seconds, String units)
    {
        if(units.equals("Days"))
        {
            return days + hoursToDays(hours) + minutesToDays(minutes) + secondsToDays(seconds);
        }
        else if(units.equals("Hours"))
        {
            return daysToHours(days) + hours + minutesToHours(minutes) + secondsToHours(seconds);
        }
        else if(units.equals("Minutes"))
        {
            return daysToMinutes(days) + hoursToMinutes(hours) + minutes + secondsToMinutes(seconds);
        }
        else 
        {
            return daysToSeconds(days) + hoursToSeconds(hours) + minutesToSeconds(minutes) + seconds;
        }
        
    }
    
    /**
     * Builds the tree model used for displaying the inputs that have been given.
     * @return
     * 		The tree model used for displaying the inputs that have been given.
     */
    private javax.swing.tree.DefaultTreeModel buildInputTree()
    {
        javax.swing.tree.DefaultTreeModel inputs;
        javax.swing.tree.DefaultMutableTreeNode defaultNode = new javax.swing.tree.DefaultMutableTreeNode("default");
        try
        {
            javax.swing.tree.DefaultMutableTreeNode routeNode = new javax.swing.tree.DefaultMutableTreeNode("Route");
            javax.swing.tree.DefaultMutableTreeNode routeValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Route Values");
            
            javax.swing.tree.DefaultMutableTreeNode routeTimeNode = new javax.swing.tree.DefaultMutableTreeNode("Single Repetition Time");
            javax.swing.tree.DefaultMutableTreeNode valueNode = new javax.swing.tree.DefaultMutableTreeNode("Minutes: " + singleMinutes);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Seconds: " + singleSeconds);
            routeTimeNode.add(valueNode);
            routeValuesNode.add(routeTimeNode);
            
            routeTimeNode = new javax.swing.tree.DefaultMutableTreeNode("Absolute Repetition Time");
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Days: " + absoluteDays);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Hours: " + absoluteHours);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Minutes: " + absoluteMinutes);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Seconds: " + absoluteSeconds);
            routeTimeNode.add(valueNode);
            routeValuesNode.add(routeTimeNode);
            
            routeNode.add(routeValuesNode);
            
            if(route.getCreatures().size() > 0)
            {
                javax.swing.tree.DefaultMutableTreeNode creaturesNode = new javax.swing.tree.DefaultMutableTreeNode("Creatures");
                for(int i = 0; i < route.getCreatures().size(); i++)
                {
                    Creature creature = route.getCreatures().get(i);
                    javax.swing.tree.DefaultMutableTreeNode creatureNode = new javax.swing.tree.DefaultMutableTreeNode(creature.getName());
                    javax.swing.tree.DefaultMutableTreeNode creatureValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Creature Values");
            
            
                    javax.swing.tree.DefaultMutableTreeNode creatValueNode = new javax.swing.tree.DefaultMutableTreeNode("ID Number: " + creature.getPosition());
                    creatureValuesNode.add(creatValueNode);
                    creatValueNode = new javax.swing.tree.DefaultMutableTreeNode("Name: " + creature.getName());
                    creatureValuesNode.add(creatValueNode);
                    creatValueNode = new javax.swing.tree.DefaultMutableTreeNode("Number in route: " + creature.getNumInRoute());
                    creatureValuesNode.add(creatValueNode);
                    creatureNode.add(creatureValuesNode);
                    if(creature.getDrops().size() > 0)
                    {
                        javax.swing.tree.DefaultMutableTreeNode dropsNode = new javax.swing.tree.DefaultMutableTreeNode("Drops");
                        for(int ii = 0; ii < creature.getDrops().size(); ii++)
                        {
                            Drop drop = creature.getDrops().get(ii);
                            javax.swing.tree.DefaultMutableTreeNode dropNode = new javax.swing.tree.DefaultMutableTreeNode(drop.getName());
                            javax.swing.tree.DefaultMutableTreeNode dropValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Drop Values");
                            javax.swing.tree.DefaultMutableTreeNode dropValNode = new javax.swing.tree.DefaultMutableTreeNode("ID Number: " + drop.getPosition());
                            dropValuesNode.add(dropValNode);
                            dropValNode = new javax.swing.tree.DefaultMutableTreeNode("Name: " + drop.getName());
                            dropValuesNode.add(dropValNode);
                            dropValNode = new javax.swing.tree.DefaultMutableTreeNode("Gold Value: " + drop.getVal());
                            dropValuesNode.add(dropValNode);
                            dropValNode = new javax.swing.tree.DefaultMutableTreeNode("Drop Rate: " + drop.getRate());
                            dropValuesNode.add(dropValNode);
                            
                            dropNode.add(dropValuesNode);
                            
                            dropsNode.add(dropNode);
                        }
                        creatureNode.add(dropsNode);
                    }
                    creaturesNode.add(creatureNode);
                }
                routeNode.add(creaturesNode);
            }
            defaultNode.add(routeNode);
        }
        catch(NullPointerException e)
        {
                    
        }
        
        inputs = new javax.swing.tree.DefaultTreeModel(defaultNode);
        return inputs;
    }
    
    /**
     * Builds the tree model used for the output of the calculations.
     * @return
     * 		The tree model used for the output of the calculations.
     */
    private javax.swing.tree.DefaultTreeModel buildOutputTree()
    {
        javax.swing.tree.DefaultTreeModel output;
        javax.swing.tree.DefaultMutableTreeNode defaultNode = new javax.swing.tree.DefaultMutableTreeNode("default");
        try
        {
            javax.swing.tree.DefaultMutableTreeNode routeNode = new javax.swing.tree.DefaultMutableTreeNode("Route");
            javax.swing.tree.DefaultMutableTreeNode routeValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Route Values");
            
            javax.swing.tree.DefaultMutableTreeNode routeTimeNode = new javax.swing.tree.DefaultMutableTreeNode("Single Repetition Time");
            javax.swing.tree.DefaultMutableTreeNode valueNode = new javax.swing.tree.DefaultMutableTreeNode("Minutes: " + singleMinutes);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Seconds: " + singleSeconds);
            routeTimeNode.add(valueNode);
            routeValuesNode.add(routeTimeNode);
            
            routeTimeNode = new javax.swing.tree.DefaultMutableTreeNode("Absolute Repetition Time");
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Days: " + absoluteDays);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Hours: " + absoluteHours);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Minutes: " + absoluteMinutes);
            routeTimeNode.add(valueNode);
            valueNode = new javax.swing.tree.DefaultMutableTreeNode("Seconds: " + absoluteSeconds);
            routeTimeNode.add(valueNode);
            routeValuesNode.add(routeTimeNode);
            
            routeNode.add(routeValuesNode);
            
            
            
            routeValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Calculated Values");
            
            
            javax.swing.tree.DefaultMutableTreeNode routeCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Gold Per Repetition of the Route: " + String.format("%,1.2f", route.avgGldPerRoute()));
            routeValuesNode.add(routeCalculationNode);
            routeCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Gold Per " + generalOutput + " without counting respawn or reset time: " + String.format("%,1.2f", route.gldPerTime(unitConversion(0, 0, singleMinutes, singleSeconds, (generalOutput + "s")))));
            routeValuesNode.add(routeCalculationNode);
            routeCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Gold Per " + generalOutput + " including  respawn and/or reset time: " + String.format("%,1.2f", route.gldPerTime(unitConversion(absoluteDays, absoluteHours, absoluteMinutes, absoluteSeconds, (generalOutput + "s")))));
            routeValuesNode.add(routeCalculationNode);
            
            routeNode.add(routeValuesNode);
            
            if(route.getCreatures().size() > 0)
            {
                javax.swing.tree.DefaultMutableTreeNode creaturesNode = new javax.swing.tree.DefaultMutableTreeNode("Creatures");
                for(int i = 0; i < route.getCreatures().size(); i++)
                {
                    Creature creature = route.getCreatures().get(i);
                    javax.swing.tree.DefaultMutableTreeNode creatureNode = new javax.swing.tree.DefaultMutableTreeNode(creature.getName());
                    javax.swing.tree.DefaultMutableTreeNode creatureValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Creature Values");
            
            
                    javax.swing.tree.DefaultMutableTreeNode creatValueNode = new javax.swing.tree.DefaultMutableTreeNode("ID Number: " + creature.getPosition());
                    creatureValuesNode.add(creatValueNode);
                    creatValueNode = new javax.swing.tree.DefaultMutableTreeNode("Name: " + creature.getName());
                    creatureValuesNode.add(creatValueNode);
                    creatValueNode = new javax.swing.tree.DefaultMutableTreeNode("Number in route: " + creature.getNumInRoute());
                    creatureValuesNode.add(creatValueNode);
                    creatureNode.add(creatureValuesNode);
                    
                    creatureValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Calculated Values");
                    javax.swing.tree.DefaultMutableTreeNode creatureCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Gold Obtained Per Kill: " + String.format("%,1.2f", creature.avgGldPerKill()));
                    creatureValuesNode.add(creatureCalculationNode);
                    creatureCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Gold From " + creature.getName() + "(s) Per Repetition of the Route: "  + String.format("%,1.2f", creature.avgGldPerRoute()));
                    creatureValuesNode.add(creatureCalculationNode);
                    
                    creatureNode.add(creatureValuesNode);
                    
                    if(creature.getDrops().size() > 0)
                    {
                        javax.swing.tree.DefaultMutableTreeNode dropsNode = new javax.swing.tree.DefaultMutableTreeNode("Drops");
                        for(int ii = 0; ii < creature.getDrops().size(); ii++)
                        {
                            Drop drop = creature.getDrops().get(ii);
                            javax.swing.tree.DefaultMutableTreeNode dropNode = new javax.swing.tree.DefaultMutableTreeNode(drop.getName());
                            javax.swing.tree.DefaultMutableTreeNode dropValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Drop Values");
                            javax.swing.tree.DefaultMutableTreeNode dropValNode = new javax.swing.tree.DefaultMutableTreeNode("ID Number: " + drop.getPosition());
                            dropValuesNode.add(dropValNode);
                            dropValNode = new javax.swing.tree.DefaultMutableTreeNode("Name: " + drop.getName());
                            dropValuesNode.add(dropValNode);
                            dropValNode = new javax.swing.tree.DefaultMutableTreeNode("Gold Value: " + drop.getVal());
                            dropValuesNode.add(dropValNode);
                            dropValNode = new javax.swing.tree.DefaultMutableTreeNode("Drop Rate: " + drop.getRate());
                            dropValuesNode.add(dropValNode);
                            
                            dropNode.add(dropValuesNode);
                            
                            dropValuesNode = new javax.swing.tree.DefaultMutableTreeNode("Calculated Values");
                            javax.swing.tree.DefaultMutableTreeNode dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Number of Kills Until This Item Drops: " + String.format("%,1.2f", drop.avgKillsTillDrop()));
                            dropValuesNode.add(dropCalculationNode);
                            dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average Number of Times to Run the Route Until This Item Drops: " + String.format("%,1.2f", drop.avgRepsTillDrop(creature.getNumInRoute())));
                            dropValuesNode.add(dropCalculationNode);
                            dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average amount of time, without counting respawn or reset time, until this item drops: " + String.format("%,1.2f", drop.timeTillDrop(unitConversion(0, 0, singleMinutes, singleSeconds, (generalOutput + "s")), creature.getNumInRoute())) + " " + generalOutput + "s");
                            dropValuesNode.add(dropCalculationNode);
                            dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average amount of time, counting respawn and/or reset time, until this item drops: " + String.format("%,1.2f", drop.timeTillDrop(unitConversion(absoluteDays, absoluteHours, absoluteMinutes, absoluteSeconds, (generalOutput + "s")), creature.getNumInRoute())) + " " + generalOutput + "s");
                            dropValuesNode.add(dropCalculationNode);
                            dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average amount of Gold, per " + creature.getName() + " kill, from this drop: " + String.format("%,1.2f", drop.avgGldPerKill()));
                            dropValuesNode.add(dropCalculationNode);
                            dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average number of drops per repetition of the route: " + String.format("%,1.2f", drop.avgDropsInNTrials(creature.getNumInRoute())));
                            dropValuesNode.add(dropCalculationNode);
                            if(count)
                            {
                                dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average amount drops obtained in " + countAmount + " " + countOutput + " without counting respawn or reset time: " + String.format("%,1.2f", drop.avgDropsPerTime(creature.getNumInRoute(), unitConversion(0, 0, singleMinutes, singleSeconds, countOutput), countAmount)));
                                dropValuesNode.add(dropCalculationNode);
                                dropCalculationNode = new javax.swing.tree.DefaultMutableTreeNode("Average amount drops obtained in " + countAmount + " " + countOutput + " counting respawn or reset time: " + String.format("%,1.2f", drop.avgDropsPerTime(creature.getNumInRoute(), unitConversion(absoluteDays, absoluteHours, absoluteMinutes, absoluteSeconds, countOutput), countAmount)));
                                dropValuesNode.add(dropCalculationNode);
                            }
                    
                            dropNode.add(dropValuesNode);
                            
                            dropsNode.add(dropNode);
                        }
                        creatureNode.add(dropsNode);
                    }
                    creaturesNode.add(creatureNode);
                }
                routeNode.add(creaturesNode);
            }
            defaultNode.add(routeNode);
        }
        catch(NullPointerException e)
        {
                    
        }
        
        output = new javax.swing.tree.DefaultTreeModel(defaultNode);
        return output;
    }
    
    /**
     * Clears the contents of the "RouteInfo" panel.
     */
    private void clearRouteInfoPanel()
    {
    	singleMinutesField.setText("");
    	singleSecondsField.setText("");
    	absoluteDaysField.setText("");
    	absoluteHoursField.setText("");
    	absoluteMinutesField.setText("");
    	absoluteSecondsField.setText("");
    }
    
    /**
     * Clears the contents of the "AddCreature" panel.
     */
    private void clearAddCreaturePanel()
    {
    	creatureNameField.setText("");
		numInRouteField.setText("");
    }
    
    /**
     * Clears the contents of the "EditCreature" panel.
     */
    private void clearEditCreaturePanel()
    {
    	creatureNameField2.setText("");
    	numberInRouteField2.setText("");
    	IDNoField.setText("");
    }
    
    /**
     * Clears the contents of the "RemoveCreature" panel.
     */
    private void clearRemoveCreaturePanel()
    {
    	
    	creatureIDNoField2.setText("");
    	
    }
    
    /**
     * Clears the contents of the "AddDrop" panel.
     */
    private void clearAddDropPanel()
    {
    	creatureIDNoField3.setText("");
    	dropNameField.setText("");
    	valueField.setText("");
    	dropRateField.setText("");
    }
    
    /**
     * Clears the contents of the "RemoveDrop" panel.
     */
    private void clearRemoveDropPanel()
    {
    	creatureIDNoField4.setText("");
    	dropIDNoField.setText("");
    }
   
    /**
     * Returns whether or not the route contains any creatures that have drops.
     * @return
     * 		True if the route contains a creature with a drop, false otherwise.
     */
    private boolean dropsExist()
    {
    	for(int i = 0; i < route.getCreatures().size(); i++)
    	{
    		if(route.getCreatures().get(i).getDrops().size() > 0)
    		{
    			return true;
    		}
    	}
    	return false;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FarmingCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FarmingCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FarmingCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FarmingCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
			public void run() {
                new FarmingCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDNoField;
    private javax.swing.JTextField absoluteDaysField;
    private javax.swing.JLabel absoluteDaysLabel;
    private javax.swing.JTextField absoluteHoursField;
    private javax.swing.JLabel absoluteHoursLabel;
    private javax.swing.JTextField absoluteMinutesField;
    private javax.swing.JLabel absoluteMinutesLabel;
    private javax.swing.JLabel absoluteRepLabel;
    private javax.swing.JTextField absoluteSecondsField;
    private javax.swing.JLabel absoluteSecondsLabel;
    private javax.swing.JPanel addCreaturePanel;
    private javax.swing.JButton addDropButton;
    private javax.swing.JPanel addDropPanel;
    private javax.swing.JCheckBox avgDropCheck;
    private javax.swing.JPanel avgDropContainer;
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton changeCreatureValuesButton;
    private javax.swing.JTextArea changeRouteInfo;
    private javax.swing.JButton changeRtStatsButton;
    private javax.swing.JButton createCreatureButton;
    private javax.swing.JButton createRouteButton;
    private javax.swing.JLabel creatureIDNo;
    private javax.swing.JTextField creatureIDNoField2;
    private javax.swing.JTextField creatureIDNoField3;
    private javax.swing.JTextField creatureIDNoField4;
    private javax.swing.JLabel creatureIDNoLabel2;
    private javax.swing.JLabel creatureIDNoLabel3;
    private javax.swing.JLabel creatureIDNoLabel4;
    private javax.swing.JTabbedPane creatureInfoPane;
    private javax.swing.JTextField creatureNameField;
    private javax.swing.JTextField creatureNameField1;
    private javax.swing.JTextField creatureNameField2;
    private javax.swing.JTextField dropIDNoField;
    private javax.swing.JLabel dropIDNoLabel;
    private javax.swing.JTabbedPane dropInfoPane;
    private javax.swing.JTextField dropNameField;
    private javax.swing.JLabel dropNameLabel;
    private javax.swing.JTextField dropRateField;
    private javax.swing.JLabel dropRateLabel1;
    private javax.swing.JLabel dropRateLabel2;
    private javax.swing.JLabel dropRateLabel3;
    private javax.swing.JPanel editCreaturePanel;
    private javax.swing.JTextArea info1;
    private javax.swing.JTextArea info2;
    private javax.swing.JTextArea info3;
    private javax.swing.JTextArea info4;
    private javax.swing.JTextArea info5;
    private javax.swing.JTextArea info6;
    private javax.swing.JTextArea info7;
    private javax.swing.JToggleButton infoButton1;
    private javax.swing.JToggleButton infoButton2;
    private javax.swing.JToggleButton infoButton3;
    private javax.swing.JToggleButton infoButton4;
    private javax.swing.JToggleButton infoButton5;
    private javax.swing.JTabbedPane infoPane;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTree inputTree;
    private javax.swing.JLabel inputsLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel nameLabel1;
    private javax.swing.JTextField numInRouteField;
    private javax.swing.JLabel numInRouteLabel;
    private javax.swing.JTextField numberInRouteField2;
    private javax.swing.JLabel numberInRouteLabel2;
    private javax.swing.JTree outputTree;
    private javax.swing.JButton removeCreatureButton;
    private javax.swing.JPanel removeCreaturePanel;
    private javax.swing.JButton removeDropButton;
    private javax.swing.JPanel removeDropPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JPanel routeInfo;
    private javax.swing.JTextField singleMinutesField;
    private javax.swing.JLabel singleMinutesLabel;
    private javax.swing.JLabel singleRepLabel;
    private javax.swing.JTextField singleSecondsField;
    private javax.swing.JLabel singleSecondsLabel;
    private javax.swing.JTextPane timeFrameInput;
    private javax.swing.JComboBox<String> timeSelector;
    private javax.swing.JComboBox<String> timeSelector1;
    private javax.swing.JTextField valueField;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
